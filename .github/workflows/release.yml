name: Release

permissions:
  contents: write

on:
  push:
    tags:
      - "*-v[0-9]+.[0-9]+.[0-9]+*"
      - "!decrypt-cookies-node-*"
      - "!decrypt-cookies-py-*"

env:
  BIN_NAME: tidy-browser
  PROJECT_NAME: tidy-browser

jobs:
  publish:
    runs-on: ubuntu-latest
    environment: cargo
    env:
      SCCACHE_GHA_ENABLED: "true"
      RUSTC_WRAPPER: "sccache"

    steps:
      - name: Fetch Repository
        uses: actions/checkout@v4

      - name: Install Stable Rust Toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: 1.82

      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.9
        with:
          version: "v0.10.0"

      - name: Install cargo-binstall
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-binstall

      - name: Install cargo-release
        run: cargo binstall -y --force --locked cargo-release

      - name: Install Dbus
        run: sudo apt update && sudo apt install libdbus-1-dev pkg-config

      - name: Publish crate
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          cargo release publish \
            --allow-branch HEAD \
            --no-confirm \
            --workspace -x \
          || echo "Some crates not publish."

  create-release:
    runs-on: ubuntu-latest
    steps:
      - name: Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          draft: false
          prerelease: false
          generate_release_notes: true

  build:
    needs: [create-release]
    if: startsWith(github.event.ref, 'refs/tags/tidy-browser')
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            cross: false
            # build-tool: cargo
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            cross: false
            # build-tool: cargo
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            cross: true
            # build-tool: cross
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            cross: true
            # build-tool: cross

          - os: macos-latest
            target: x86_64-apple-darwin
            cross: false
            # build-tool: cargo
          - os: macos-latest
            target: aarch64-apple-darwin
            cross: false
            # build-tool: cargo

          - os: windows-latest
            target: x86_64-pc-windows-msvc
            cross: false
            # build-tool: cargo
          # not support rust 1.82
          # - os: windows-latest
          #   target: x86_64-pc-windows-gnu
          #   cross: true
          #   # build-tool: cargo
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            cross: false
            # build-tool: cargo

    name: ${{ matrix.target }} (${{ matrix.os }})
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Stable Rust Toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: 1.82
          targets: ${{ matrix.target }}

      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.9
        with:
          version: "v0.10.0"

      - name: Install cross-compilation tools
        if: ${{ matrix.cross }}
        uses: taiki-e/setup-cross-toolchain-action@v1
        with:
          target: ${{ matrix.target }}

      - uses: taiki-e/install-action@v2
        if: ${{ matrix.cross }}
        with:
          tool: cross

      - uses: taiki-e/upload-rust-binary-action@v1
        with:
          bin: ${{ env.BIN_NAME }}
          # features: ${{ matrix.features || '' }}
          # build-tool: ${{ matrix.build-tool }}
          target: ${{ matrix.target }}
          # include: attribution
          archive: $tag-$target
          token: ${{ secrets.GITHUB_TOKEN }}
          # ref: refs/tags/${{ needs.get-version.outputs.tag_version }}
          checksum: sha256
