/* auto-generated by NAPI-RS */
/* eslint-disable */
export declare class ArcCookieGetter {
  static new(base?: string | undefined | null): Promise<ArcCookieGetter>
  cookiesAll(): Promise<Array<ChromiumCookie>>
  cookiesByHost(host: string): Promise<Array<ChromiumCookie>>
}

export declare class ArcGetter {
  static new(base?: string | undefined | null): Promise<ArcGetter>
  cookiesAll(): Promise<Array<ChromiumCookie>>
  cookiesByHost(host: string): Promise<Array<ChromiumCookie>>
  loginsAll(): Promise<Array<LoginData>>
  loginsByHost(host: string): Promise<Array<LoginData>>
}

export declare class ArcLoginGetter {
  static new(base?: string | undefined | null): Promise<ArcLoginGetter>
  loginsAll(): Promise<Array<LoginData>>
  loginsByHost(host: string): Promise<Array<LoginData>>
}

export declare class BraveCookieGetter {
  static new(base?: string | undefined | null): Promise<BraveCookieGetter>
  cookiesAll(): Promise<Array<ChromiumCookie>>
  cookiesByHost(host: string): Promise<Array<ChromiumCookie>>
}

export declare class BraveGetter {
  static new(base?: string | undefined | null): Promise<BraveGetter>
  cookiesAll(): Promise<Array<ChromiumCookie>>
  cookiesByHost(host: string): Promise<Array<ChromiumCookie>>
  loginsAll(): Promise<Array<LoginData>>
  loginsByHost(host: string): Promise<Array<LoginData>>
}

export declare class BraveLoginGetter {
  static new(base?: string | undefined | null): Promise<BraveLoginGetter>
  loginsAll(): Promise<Array<LoginData>>
  loginsByHost(host: string): Promise<Array<LoginData>>
}

export declare class ChromeCookieGetter {
  static new(base?: string | undefined | null): Promise<ChromeCookieGetter>
  cookiesAll(): Promise<Array<ChromiumCookie>>
  cookiesByHost(host: string): Promise<Array<ChromiumCookie>>
}

export declare class ChromeGetter {
  static new(base?: string | undefined | null): Promise<ChromeGetter>
  cookiesAll(): Promise<Array<ChromiumCookie>>
  cookiesByHost(host: string): Promise<Array<ChromiumCookie>>
  loginsAll(): Promise<Array<LoginData>>
  loginsByHost(host: string): Promise<Array<LoginData>>
}

export declare class ChromeLoginGetter {
  static new(base?: string | undefined | null): Promise<ChromeLoginGetter>
  loginsAll(): Promise<Array<LoginData>>
  loginsByHost(host: string): Promise<Array<LoginData>>
}

export declare class ChromiumCookieGetter {
  static new(base?: string | undefined | null): Promise<ChromiumCookieGetter>
  cookiesAll(): Promise<Array<ChromiumCookie>>
  cookiesByHost(host: string): Promise<Array<ChromiumCookie>>
}

export declare class ChromiumGetter {
  static new(base?: string | undefined | null): Promise<ChromiumGetter>
  cookiesAll(): Promise<Array<ChromiumCookie>>
  cookiesByHost(host: string): Promise<Array<ChromiumCookie>>
  loginsAll(): Promise<Array<LoginData>>
  loginsByHost(host: string): Promise<Array<LoginData>>
}

export declare class ChromiumLoginGetter {
  static new(base?: string | undefined | null): Promise<ChromiumLoginGetter>
  loginsAll(): Promise<Array<LoginData>>
  loginsByHost(host: string): Promise<Array<LoginData>>
}

export declare class CocCocCookieGetter {
  static new(base?: string | undefined | null): Promise<CocCocCookieGetter>
  cookiesAll(): Promise<Array<ChromiumCookie>>
  cookiesByHost(host: string): Promise<Array<ChromiumCookie>>
}

export declare class CocCocGetter {
  static new(base?: string | undefined | null): Promise<CocCocGetter>
  cookiesAll(): Promise<Array<ChromiumCookie>>
  cookiesByHost(host: string): Promise<Array<ChromiumCookie>>
  loginsAll(): Promise<Array<LoginData>>
  loginsByHost(host: string): Promise<Array<LoginData>>
}

export declare class CocCocLoginGetter {
  static new(base?: string | undefined | null): Promise<CocCocLoginGetter>
  loginsAll(): Promise<Array<LoginData>>
  loginsByHost(host: string): Promise<Array<LoginData>>
}

export declare class EdgeCookieGetter {
  static new(base?: string | undefined | null): Promise<EdgeCookieGetter>
  cookiesAll(): Promise<Array<ChromiumCookie>>
  cookiesByHost(host: string): Promise<Array<ChromiumCookie>>
}

export declare class EdgeGetter {
  static new(base?: string | undefined | null): Promise<EdgeGetter>
  cookiesAll(): Promise<Array<ChromiumCookie>>
  cookiesByHost(host: string): Promise<Array<ChromiumCookie>>
  loginsAll(): Promise<Array<LoginData>>
  loginsByHost(host: string): Promise<Array<LoginData>>
}

export declare class EdgeLoginGetter {
  static new(base?: string | undefined | null): Promise<EdgeLoginGetter>
  loginsAll(): Promise<Array<LoginData>>
  loginsByHost(host: string): Promise<Array<LoginData>>
}

export declare class FirefoxCookieGetter {
  static new(base?: string | undefined | null, profile?: string | undefined | null, profilePath?: string | undefined | null): Promise<FirefoxCookieGetter>
  cookiesAll(): Promise<Array<MozCookie>>
  cookiesByHost(host: string): Promise<Array<MozCookie>>
}

export declare class FirefoxGetter {
  static new(base?: string | undefined | null, profile?: string | undefined | null, profilePath?: string | undefined | null): Promise<FirefoxGetter>
  cookiesAll(): Promise<Array<MozCookie>>
  cookiesByHost(host: string): Promise<Array<MozCookie>>
}

export declare class FloorpCookieGetter {
  static new(base?: string | undefined | null, profile?: string | undefined | null, profilePath?: string | undefined | null): Promise<FloorpCookieGetter>
  cookiesAll(): Promise<Array<MozCookie>>
  cookiesByHost(host: string): Promise<Array<MozCookie>>
}

export declare class FloorpGetter {
  static new(base?: string | undefined | null, profile?: string | undefined | null, profilePath?: string | undefined | null): Promise<FloorpGetter>
  cookiesAll(): Promise<Array<MozCookie>>
  cookiesByHost(host: string): Promise<Array<MozCookie>>
}

export declare class LibrewolfCookieGetter {
  static new(base?: string | undefined | null, profile?: string | undefined | null, profilePath?: string | undefined | null): Promise<LibrewolfCookieGetter>
  cookiesAll(): Promise<Array<MozCookie>>
  cookiesByHost(host: string): Promise<Array<MozCookie>>
}

export declare class LibrewolfGetter {
  static new(base?: string | undefined | null, profile?: string | undefined | null, profilePath?: string | undefined | null): Promise<LibrewolfGetter>
  cookiesAll(): Promise<Array<MozCookie>>
  cookiesByHost(host: string): Promise<Array<MozCookie>>
}

export declare class OperaCookieGetter {
  static new(base?: string | undefined | null): Promise<OperaCookieGetter>
  cookiesAll(): Promise<Array<ChromiumCookie>>
  cookiesByHost(host: string): Promise<Array<ChromiumCookie>>
}

export declare class OperaGetter {
  static new(base?: string | undefined | null): Promise<OperaGetter>
  cookiesAll(): Promise<Array<ChromiumCookie>>
  cookiesByHost(host: string): Promise<Array<ChromiumCookie>>
  loginsAll(): Promise<Array<LoginData>>
  loginsByHost(host: string): Promise<Array<LoginData>>
}

export declare class OperaGxCookieGetter {
  static new(base?: string | undefined | null): Promise<OperaGxCookieGetter>
  cookiesAll(): Promise<Array<ChromiumCookie>>
  cookiesByHost(host: string): Promise<Array<ChromiumCookie>>
}
export type OperaGXCookieGetter = OperaGxCookieGetter

export declare class OperaGxGetter {
  static new(base?: string | undefined | null): Promise<OperaGxGetter>
  cookiesAll(): Promise<Array<ChromiumCookie>>
  cookiesByHost(host: string): Promise<Array<ChromiumCookie>>
  loginsAll(): Promise<Array<LoginData>>
  loginsByHost(host: string): Promise<Array<LoginData>>
}
export type OperaGXGetter = OperaGxGetter

export declare class OperaGxLoginGetter {
  static new(base?: string | undefined | null): Promise<OperaGxLoginGetter>
  loginsAll(): Promise<Array<LoginData>>
  loginsByHost(host: string): Promise<Array<LoginData>>
}
export type OperaGXLoginGetter = OperaGxLoginGetter

export declare class OperaLoginGetter {
  static new(base?: string | undefined | null): Promise<OperaLoginGetter>
  loginsAll(): Promise<Array<LoginData>>
  loginsByHost(host: string): Promise<Array<LoginData>>
}

export declare class SafariGetter {
  static new(cookiesPath?: string | undefined | null): Promise<SafariGetter>
  cookiesAll(): Array<SafariCookie>
  cookiesByHost(host: string): Array<SafariCookie>
}

export declare class VivaldiCookieGetter {
  static new(base?: string | undefined | null): Promise<VivaldiCookieGetter>
  cookiesAll(): Promise<Array<ChromiumCookie>>
  cookiesByHost(host: string): Promise<Array<ChromiumCookie>>
}

export declare class VivaldiGetter {
  static new(base?: string | undefined | null): Promise<VivaldiGetter>
  cookiesAll(): Promise<Array<ChromiumCookie>>
  cookiesByHost(host: string): Promise<Array<ChromiumCookie>>
  loginsAll(): Promise<Array<LoginData>>
  loginsByHost(host: string): Promise<Array<LoginData>>
}

export declare class VivaldiLoginGetter {
  static new(base?: string | undefined | null): Promise<VivaldiLoginGetter>
  loginsAll(): Promise<Array<LoginData>>
  loginsByHost(host: string): Promise<Array<LoginData>>
}

export declare class YandexCookieGetter {
  static new(base?: string | undefined | null): Promise<YandexCookieGetter>
  cookiesAll(): Promise<Array<ChromiumCookie>>
  cookiesByHost(host: string): Promise<Array<ChromiumCookie>>
}

export declare class YandexGetter {
  static new(base?: string | undefined | null): Promise<YandexGetter>
  cookiesAll(): Promise<Array<ChromiumCookie>>
  cookiesByHost(host: string): Promise<Array<ChromiumCookie>>
  loginsAll(): Promise<Array<LoginData>>
  loginsByHost(host: string): Promise<Array<LoginData>>
}

export declare class YandexLoginGetter {
  static new(base?: string | undefined | null): Promise<YandexLoginGetter>
  loginsAll(): Promise<Array<LoginData>>
  loginsByHost(host: string): Promise<Array<LoginData>>
}

export declare class ZenCookieGetter {
  static new(base?: string | undefined | null, profile?: string | undefined | null, profilePath?: string | undefined | null): Promise<ZenCookieGetter>
  cookiesAll(): Promise<Array<MozCookie>>
  cookiesByHost(host: string): Promise<Array<MozCookie>>
}

export declare class ZenGetter {
  static new(base?: string | undefined | null, profile?: string | undefined | null, profilePath?: string | undefined | null): Promise<ZenGetter>
  cookiesAll(): Promise<Array<MozCookie>>
  cookiesByHost(host: string): Promise<Array<MozCookie>>
}

export interface ChromiumCookie {
  creationUtc?: Date
  hostKey: string
  topFrameSiteKey: string
  name: string
  value: string
  decryptedValue?: string
  path: string
  expiresUtc?: Date
  isSecure: boolean
  isHttponly: boolean
  lastAccessUtc?: Date
  hasExpires: boolean
  isPersistent: boolean
  priority: number
  sameSite: SameSite
  sourceScheme: number
  sourcePort: number
  lastUpdateUtc?: Date
}

export interface LoginData {
  originUrl: string
  actionUrl?: string
  usernameElement?: string
  usernameValue?: string
  passwordElement?: string
  passwordValue?: string
  submitElement: string
  signonRealm: string
  dateCreated?: Date
  blacklistedByUser: number
  scheme: number
  passwordType: number
  timesUsed: number
  formData?: Array<number>
  displayName: string
  iconUrl: string
  federationUrl: string
  skipZeroClick: number
  generationUploadStatus: number
  possibleUsernamePairs?: Array<number>
  id: number
  dateLastUsed?: Date
  datePasswordModified?: Date
}

export interface MozCookie {
  id: number
  originAttributes: string
  name: string
  value: string
  host: string
  path: string
  expiry?: Date
  lastAccessed?: Date
  creationTime?: Date
  isSecure: boolean
  isHttpOnly: boolean
  inBrowserElement: number
  sameSite: SameSite
  schemeMap: number
}

export interface SafariCookie {
  version: number
  flags: number
  port?: number
  comment?: string
  domain: string
  name: string
  path: string
  value: string
  expires?: Date
  creation?: Date
  sameSite: SameSite
  isSecure: boolean
  isHttpOnly: boolean
}

export declare const enum SameSite {
  Non = 0,
  Lax = 1,
  Strict = 2
}
