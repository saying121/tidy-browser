# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import builtins
import datetime
import os
import pathlib
import typing
from enum import Enum

class ArcCookieGetter:
    def __new__(cls, base:typing.Optional[builtins.str | os.PathLike | pathlib.Path]=None) -> typing.Awaitable[ArcCookieGetter]:
        r"""
        base: When browser start with `--user-data-dir=DIR` or special other channel
        """
    def cookies_all(self) -> typing.Awaitable[list[ChromiumCookie]]:
        r"""
        Return all cookies
        """
    def cookies_by_host(self, host:builtins.str) -> typing.Awaitable[list[ChromiumCookie]]:
        r"""
        Filter by host
        """

class ArcGetter:
    def __new__(cls, base:typing.Optional[builtins.str | os.PathLike | pathlib.Path]=None) -> typing.Awaitable[ArcGetter]:
        r"""
        base: When browser start with `--user-data-dir=DIR` or special other channel
        """
    def cookies_all(self) -> typing.Awaitable[list[ChromiumCookie]]:
        r"""
        Return all cookies
        """
    def cookies_by_host(self, host:builtins.str) -> typing.Awaitable[list[ChromiumCookie]]:
        r"""
        Filter by host
        """
    def logins_all(self) -> typing.Awaitable[list[LoginData]]:
        r"""
        Return all login data
        """
    def logins_by_host(self, host:builtins.str) -> typing.Awaitable[list[LoginData]]:
        r"""
        Filter by host
        """

class BraveCookieGetter:
    def __new__(cls, base:typing.Optional[builtins.str | os.PathLike | pathlib.Path]=None) -> typing.Awaitable[BraveCookieGetter]:
        r"""
        base: When browser start with `--user-data-dir=DIR` or special other channel
        """
    def cookies_all(self) -> typing.Awaitable[list[ChromiumCookie]]:
        r"""
        Return all cookies
        """
    def cookies_by_host(self, host:builtins.str) -> typing.Awaitable[list[ChromiumCookie]]:
        r"""
        Filter by host
        """

class BraveGetter:
    def __new__(cls, base:typing.Optional[builtins.str | os.PathLike | pathlib.Path]=None) -> typing.Awaitable[BraveGetter]:
        r"""
        base: When browser start with `--user-data-dir=DIR` or special other channel
        """
    def cookies_all(self) -> typing.Awaitable[list[ChromiumCookie]]:
        r"""
        Return all cookies
        """
    def cookies_by_host(self, host:builtins.str) -> typing.Awaitable[list[ChromiumCookie]]:
        r"""
        Filter by host
        """
    def logins_all(self) -> typing.Awaitable[list[LoginData]]:
        r"""
        Return all login data
        """
    def logins_by_host(self, host:builtins.str) -> typing.Awaitable[list[LoginData]]:
        r"""
        Filter by host
        """

class ChromeCookieGetter:
    def __new__(cls, base:typing.Optional[builtins.str | os.PathLike | pathlib.Path]=None) -> typing.Awaitable[ChromeCookieGetter]:
        r"""
        base: When browser start with `--user-data-dir=DIR` or special other channel
        """
    def cookies_all(self) -> typing.Awaitable[list[ChromiumCookie]]:
        r"""
        Return all cookies
        """
    def cookies_by_host(self, host:builtins.str) -> typing.Awaitable[list[ChromiumCookie]]:
        r"""
        Filter by host
        """

class ChromeGetter:
    def __new__(cls, base:typing.Optional[builtins.str | os.PathLike | pathlib.Path]=None) -> typing.Awaitable[ChromeGetter]:
        r"""
        base: When browser start with `--user-data-dir=DIR` or special other channel
        """
    def cookies_all(self) -> typing.Awaitable[list[ChromiumCookie]]:
        r"""
        Return all cookies
        """
    def cookies_by_host(self, host:builtins.str) -> typing.Awaitable[list[ChromiumCookie]]:
        r"""
        Filter by host
        """
    def logins_all(self) -> typing.Awaitable[list[LoginData]]:
        r"""
        Return all login data
        """
    def logins_by_host(self, host:builtins.str) -> typing.Awaitable[list[LoginData]]:
        r"""
        Filter by host
        """

class ChromiumCookie:
    @property
    def creation_utc(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def host_key(self) -> builtins.str: ...
    @property
    def top_frame_site_key(self) -> builtins.str: ...
    @property
    def name(self) -> builtins.str: ...
    @property
    def value(self) -> builtins.str: ...
    @property
    def decrypted_value(self) -> typing.Optional[builtins.str]: ...
    @property
    def path(self) -> builtins.str: ...
    @property
    def expires_utc(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def is_secure(self) -> builtins.bool: ...
    @property
    def is_httponly(self) -> builtins.bool: ...
    @property
    def last_access_utc(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def has_expires(self) -> builtins.bool: ...
    @property
    def is_persistent(self) -> builtins.bool: ...
    @property
    def priority(self) -> builtins.int: ...
    @property
    def same_site(self) -> SameSite: ...
    @property
    def source_scheme(self) -> builtins.int: ...
    @property
    def source_port(self) -> builtins.int: ...
    @property
    def last_update_utc(self) -> typing.Optional[datetime.datetime]: ...
    @creation_utc.setter
    def creation_utc(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @host_key.setter
    def host_key(self, value: builtins.str) -> None: ...
    @top_frame_site_key.setter
    def top_frame_site_key(self, value: builtins.str) -> None: ...
    @name.setter
    def name(self, value: builtins.str) -> None: ...
    @value.setter
    def value(self, value: builtins.str) -> None: ...
    @decrypted_value.setter
    def decrypted_value(self, value: typing.Optional[builtins.str]) -> None: ...
    @path.setter
    def path(self, value: builtins.str) -> None: ...
    @expires_utc.setter
    def expires_utc(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @is_secure.setter
    def is_secure(self, value: builtins.bool) -> None: ...
    @is_httponly.setter
    def is_httponly(self, value: builtins.bool) -> None: ...
    @last_access_utc.setter
    def last_access_utc(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @has_expires.setter
    def has_expires(self, value: builtins.bool) -> None: ...
    @is_persistent.setter
    def is_persistent(self, value: builtins.bool) -> None: ...
    @priority.setter
    def priority(self, value: builtins.int) -> None: ...
    @same_site.setter
    def same_site(self, value: SameSite) -> None: ...
    @source_scheme.setter
    def source_scheme(self, value: builtins.int) -> None: ...
    @source_port.setter
    def source_port(self, value: builtins.int) -> None: ...
    @last_update_utc.setter
    def last_update_utc(self, value: typing.Optional[datetime.datetime]) -> None: ...

class ChromiumCookieGetter:
    def __new__(cls, base:typing.Optional[builtins.str | os.PathLike | pathlib.Path]=None) -> typing.Awaitable[ChromiumCookieGetter]:
        r"""
        base: When browser start with `--user-data-dir=DIR` or special other channel
        """
    def cookies_all(self) -> typing.Awaitable[list[ChromiumCookie]]:
        r"""
        Return all cookies
        """
    def cookies_by_host(self, host:builtins.str) -> typing.Awaitable[list[ChromiumCookie]]:
        r"""
        Filter by host
        """

class ChromiumGetter:
    def __new__(cls, base:typing.Optional[builtins.str | os.PathLike | pathlib.Path]=None) -> typing.Awaitable[ChromiumGetter]:
        r"""
        base: When browser start with `--user-data-dir=DIR` or special other channel
        """
    def cookies_all(self) -> typing.Awaitable[list[ChromiumCookie]]:
        r"""
        Return all cookies
        """
    def cookies_by_host(self, host:builtins.str) -> typing.Awaitable[list[ChromiumCookie]]:
        r"""
        Filter by host
        """
    def logins_all(self) -> typing.Awaitable[list[LoginData]]:
        r"""
        Return all login data
        """
    def logins_by_host(self, host:builtins.str) -> typing.Awaitable[list[LoginData]]:
        r"""
        Filter by host
        """

class CocCocCookieGetter:
    def __new__(cls, base:typing.Optional[builtins.str | os.PathLike | pathlib.Path]=None) -> typing.Awaitable[CocCocCookieGetter]:
        r"""
        base: When browser start with `--user-data-dir=DIR` or special other channel
        """
    def cookies_all(self) -> typing.Awaitable[list[ChromiumCookie]]:
        r"""
        Return all cookies
        """
    def cookies_by_host(self, host:builtins.str) -> typing.Awaitable[list[ChromiumCookie]]:
        r"""
        Filter by host
        """

class CocCocGetter:
    def __new__(cls, base:typing.Optional[builtins.str | os.PathLike | pathlib.Path]=None) -> typing.Awaitable[CocCocGetter]:
        r"""
        base: When browser start with `--user-data-dir=DIR` or special other channel
        """
    def cookies_all(self) -> typing.Awaitable[list[ChromiumCookie]]:
        r"""
        Return all cookies
        """
    def cookies_by_host(self, host:builtins.str) -> typing.Awaitable[list[ChromiumCookie]]:
        r"""
        Filter by host
        """
    def logins_all(self) -> typing.Awaitable[list[LoginData]]:
        r"""
        Return all login data
        """
    def logins_by_host(self, host:builtins.str) -> typing.Awaitable[list[LoginData]]:
        r"""
        Filter by host
        """

class EdgeCookieGetter:
    def __new__(cls, base:typing.Optional[builtins.str | os.PathLike | pathlib.Path]=None) -> typing.Awaitable[EdgeCookieGetter]:
        r"""
        base: When browser start with `--user-data-dir=DIR` or special other channel
        """
    def cookies_all(self) -> typing.Awaitable[list[ChromiumCookie]]:
        r"""
        Return all cookies
        """
    def cookies_by_host(self, host:builtins.str) -> typing.Awaitable[list[ChromiumCookie]]:
        r"""
        Filter by host
        """

class EdgeGetter:
    def __new__(cls, base:typing.Optional[builtins.str | os.PathLike | pathlib.Path]=None) -> typing.Awaitable[EdgeGetter]:
        r"""
        base: When browser start with `--user-data-dir=DIR` or special other channel
        """
    def cookies_all(self) -> typing.Awaitable[list[ChromiumCookie]]:
        r"""
        Return all cookies
        """
    def cookies_by_host(self, host:builtins.str) -> typing.Awaitable[list[ChromiumCookie]]:
        r"""
        Filter by host
        """
    def logins_all(self) -> typing.Awaitable[list[LoginData]]:
        r"""
        Return all login data
        """
    def logins_by_host(self, host:builtins.str) -> typing.Awaitable[list[LoginData]]:
        r"""
        Filter by host
        """

class FirefoxCookieGetter:
    def __new__(cls, base:typing.Optional[builtins.str | os.PathLike | pathlib.Path]=None, profile:typing.Optional[builtins.str]=None, profile_path:typing.Optional[builtins.str | os.PathLike | pathlib.Path]=None) -> typing.Awaitable[FirefoxCookieGetter]:
        r"""
        `base`: When Firefox data path changed
        `profile`: When started with `-P <profile>`
        `profile_path`: when browser started with `-profile <profile_path>`
        
        When set `profile_path` ignore other parameters like `base`, `profile`.
        """
    def cookies_all(self) -> typing.Awaitable[list[MozCookie]]:
        r"""
        Return all cookies
        """
    def cookies_by_host(self, host:builtins.str) -> typing.Awaitable[list[MozCookie]]:
        r"""
        Filter by host
        """

class FirefoxGetter:
    def __new__(cls, base:typing.Optional[builtins.str | os.PathLike | pathlib.Path]=None, profile:typing.Optional[builtins.str]=None, profile_path:typing.Optional[builtins.str | os.PathLike | pathlib.Path]=None) -> typing.Awaitable[FirefoxGetter]:
        r"""
        `base`: When Firefox data path changed
        `profile`: When started with `-P <profile>`
        `profile_path`: when browser started with `-profile <profile_path>`
        
        When set `profile_path` ignore other parameters like `base`, `profile`.
        """
    def cookies_all(self) -> typing.Awaitable[list[MozCookie]]:
        r"""
        Return all cookies
        """
    def cookies_by_host(self, host:builtins.str) -> typing.Awaitable[list[MozCookie]]:
        r"""
        Filter by host
        """

class FloorpCookieGetter:
    def __new__(cls, base:typing.Optional[builtins.str | os.PathLike | pathlib.Path]=None, profile:typing.Optional[builtins.str]=None, profile_path:typing.Optional[builtins.str | os.PathLike | pathlib.Path]=None) -> typing.Awaitable[FloorpCookieGetter]:
        r"""
        `base`: When Firefox data path changed
        `profile`: When started with `-P <profile>`
        `profile_path`: when browser started with `-profile <profile_path>`
        
        When set `profile_path` ignore other parameters like `base`, `profile`.
        """
    def cookies_all(self) -> typing.Awaitable[list[MozCookie]]:
        r"""
        Return all cookies
        """
    def cookies_by_host(self, host:builtins.str) -> typing.Awaitable[list[MozCookie]]:
        r"""
        Filter by host
        """

class FloorpGetter:
    def __new__(cls, base:typing.Optional[builtins.str | os.PathLike | pathlib.Path]=None, profile:typing.Optional[builtins.str]=None, profile_path:typing.Optional[builtins.str | os.PathLike | pathlib.Path]=None) -> typing.Awaitable[FloorpGetter]:
        r"""
        `base`: When Firefox data path changed
        `profile`: When started with `-P <profile>`
        `profile_path`: when browser started with `-profile <profile_path>`
        
        When set `profile_path` ignore other parameters like `base`, `profile`.
        """
    def cookies_all(self) -> typing.Awaitable[list[MozCookie]]:
        r"""
        Return all cookies
        """
    def cookies_by_host(self, host:builtins.str) -> typing.Awaitable[list[MozCookie]]:
        r"""
        Filter by host
        """

class LibrewolfCookieGetter:
    def __new__(cls, base:typing.Optional[builtins.str | os.PathLike | pathlib.Path]=None, profile:typing.Optional[builtins.str]=None, profile_path:typing.Optional[builtins.str | os.PathLike | pathlib.Path]=None) -> typing.Awaitable[LibrewolfCookieGetter]:
        r"""
        `base`: When Firefox data path changed
        `profile`: When started with `-P <profile>`
        `profile_path`: when browser started with `-profile <profile_path>`
        
        When set `profile_path` ignore other parameters like `base`, `profile`.
        """
    def cookies_all(self) -> typing.Awaitable[list[MozCookie]]:
        r"""
        Return all cookies
        """
    def cookies_by_host(self, host:builtins.str) -> typing.Awaitable[list[MozCookie]]:
        r"""
        Filter by host
        """

class LibrewolfGetter:
    def __new__(cls, base:typing.Optional[builtins.str | os.PathLike | pathlib.Path]=None, profile:typing.Optional[builtins.str]=None, profile_path:typing.Optional[builtins.str | os.PathLike | pathlib.Path]=None) -> typing.Awaitable[LibrewolfGetter]:
        r"""
        `base`: When Firefox data path changed
        `profile`: When started with `-P <profile>`
        `profile_path`: when browser started with `-profile <profile_path>`
        
        When set `profile_path` ignore other parameters like `base`, `profile`.
        """
    def cookies_all(self) -> typing.Awaitable[list[MozCookie]]:
        r"""
        Return all cookies
        """
    def cookies_by_host(self, host:builtins.str) -> typing.Awaitable[list[MozCookie]]:
        r"""
        Filter by host
        """

class LoginData:
    @property
    def origin_url(self) -> builtins.str: ...
    @property
    def action_url(self) -> typing.Optional[builtins.str]: ...
    @property
    def username_element(self) -> typing.Optional[builtins.str]: ...
    @property
    def username_value(self) -> typing.Optional[builtins.str]: ...
    @property
    def password_element(self) -> typing.Optional[builtins.str]: ...
    @property
    def password_value(self) -> typing.Optional[builtins.str]: ...
    @property
    def submit_element(self) -> builtins.str: ...
    @property
    def signon_realm(self) -> builtins.str: ...
    @property
    def date_created(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def blacklisted_by_user(self) -> builtins.int: ...
    @property
    def scheme(self) -> builtins.int: ...
    @property
    def password_type(self) -> builtins.int: ...
    @property
    def times_used(self) -> builtins.int: ...
    @property
    def form_data(self) -> typing.Optional[builtins.list[builtins.int]]: ...
    @property
    def display_name(self) -> builtins.str: ...
    @property
    def icon_url(self) -> builtins.str: ...
    @property
    def federation_url(self) -> builtins.str: ...
    @property
    def skip_zero_click(self) -> builtins.int: ...
    @property
    def generation_upload_status(self) -> builtins.int: ...
    @property
    def possible_username_pairs(self) -> typing.Optional[builtins.list[builtins.int]]: ...
    @property
    def id(self) -> builtins.int: ...
    @property
    def date_last_used(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def date_password_modified(self) -> typing.Optional[datetime.datetime]: ...
    @origin_url.setter
    def origin_url(self, value: builtins.str) -> None: ...
    @action_url.setter
    def action_url(self, value: typing.Optional[builtins.str]) -> None: ...
    @username_element.setter
    def username_element(self, value: typing.Optional[builtins.str]) -> None: ...
    @username_value.setter
    def username_value(self, value: typing.Optional[builtins.str]) -> None: ...
    @password_element.setter
    def password_element(self, value: typing.Optional[builtins.str]) -> None: ...
    @password_value.setter
    def password_value(self, value: typing.Optional[builtins.str]) -> None: ...
    @submit_element.setter
    def submit_element(self, value: builtins.str) -> None: ...
    @signon_realm.setter
    def signon_realm(self, value: builtins.str) -> None: ...
    @date_created.setter
    def date_created(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @blacklisted_by_user.setter
    def blacklisted_by_user(self, value: builtins.int) -> None: ...
    @scheme.setter
    def scheme(self, value: builtins.int) -> None: ...
    @password_type.setter
    def password_type(self, value: builtins.int) -> None: ...
    @times_used.setter
    def times_used(self, value: builtins.int) -> None: ...
    @form_data.setter
    def form_data(self, value: typing.Optional[builtins.list[builtins.int]]) -> None: ...
    @display_name.setter
    def display_name(self, value: builtins.str) -> None: ...
    @icon_url.setter
    def icon_url(self, value: builtins.str) -> None: ...
    @federation_url.setter
    def federation_url(self, value: builtins.str) -> None: ...
    @skip_zero_click.setter
    def skip_zero_click(self, value: builtins.int) -> None: ...
    @generation_upload_status.setter
    def generation_upload_status(self, value: builtins.int) -> None: ...
    @possible_username_pairs.setter
    def possible_username_pairs(self, value: typing.Optional[builtins.list[builtins.int]]) -> None: ...
    @id.setter
    def id(self, value: builtins.int) -> None: ...
    @date_last_used.setter
    def date_last_used(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @date_password_modified.setter
    def date_password_modified(self, value: typing.Optional[datetime.datetime]) -> None: ...

class MozCookie:
    @property
    def id(self) -> builtins.int: ...
    @property
    def origin_attributes(self) -> builtins.str: ...
    @property
    def name(self) -> builtins.str: ...
    @property
    def value(self) -> builtins.str: ...
    @property
    def host(self) -> builtins.str: ...
    @property
    def path(self) -> builtins.str: ...
    @property
    def expiry(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def last_accessed(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def creation_time(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def is_secure(self) -> builtins.bool: ...
    @property
    def is_http_only(self) -> builtins.bool: ...
    @property
    def in_browser_element(self) -> builtins.int: ...
    @property
    def same_site(self) -> SameSite: ...
    @property
    def scheme_map(self) -> builtins.int: ...
    @id.setter
    def id(self, value: builtins.int) -> None: ...
    @origin_attributes.setter
    def origin_attributes(self, value: builtins.str) -> None: ...
    @name.setter
    def name(self, value: builtins.str) -> None: ...
    @value.setter
    def value(self, value: builtins.str) -> None: ...
    @host.setter
    def host(self, value: builtins.str) -> None: ...
    @path.setter
    def path(self, value: builtins.str) -> None: ...
    @expiry.setter
    def expiry(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @last_accessed.setter
    def last_accessed(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @creation_time.setter
    def creation_time(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @is_secure.setter
    def is_secure(self, value: builtins.bool) -> None: ...
    @is_http_only.setter
    def is_http_only(self, value: builtins.bool) -> None: ...
    @in_browser_element.setter
    def in_browser_element(self, value: builtins.int) -> None: ...
    @same_site.setter
    def same_site(self, value: SameSite) -> None: ...
    @scheme_map.setter
    def scheme_map(self, value: builtins.int) -> None: ...

class OperaCookieGetter:
    def __new__(cls, base:typing.Optional[builtins.str | os.PathLike | pathlib.Path]=None) -> typing.Awaitable[OperaCookieGetter]:
        r"""
        base: When browser start with `--user-data-dir=DIR` or special other channel
        """
    def cookies_all(self) -> typing.Awaitable[list[ChromiumCookie]]:
        r"""
        Return all cookies
        """
    def cookies_by_host(self, host:builtins.str) -> typing.Awaitable[list[ChromiumCookie]]:
        r"""
        Filter by host
        """

class OperaGXCookieGetter:
    def __new__(cls, base:typing.Optional[builtins.str | os.PathLike | pathlib.Path]=None) -> typing.Awaitable[OperaGXCookieGetter]:
        r"""
        base: When browser start with `--user-data-dir=DIR` or special other channel
        """
    def cookies_all(self) -> typing.Awaitable[list[ChromiumCookie]]:
        r"""
        Return all cookies
        """
    def cookies_by_host(self, host:builtins.str) -> typing.Awaitable[list[ChromiumCookie]]:
        r"""
        Filter by host
        """

class OperaGXGetter:
    def __new__(cls, base:typing.Optional[builtins.str | os.PathLike | pathlib.Path]=None) -> typing.Awaitable[OperaGXGetter]:
        r"""
        base: When browser start with `--user-data-dir=DIR` or special other channel
        """
    def cookies_all(self) -> typing.Awaitable[list[ChromiumCookie]]:
        r"""
        Return all cookies
        """
    def cookies_by_host(self, host:builtins.str) -> typing.Awaitable[list[ChromiumCookie]]:
        r"""
        Filter by host
        """
    def logins_all(self) -> typing.Awaitable[list[LoginData]]:
        r"""
        Return all login data
        """
    def logins_by_host(self, host:builtins.str) -> typing.Awaitable[list[LoginData]]:
        r"""
        Filter by host
        """

class OperaGetter:
    def __new__(cls, base:typing.Optional[builtins.str | os.PathLike | pathlib.Path]=None) -> typing.Awaitable[OperaGetter]:
        r"""
        base: When browser start with `--user-data-dir=DIR` or special other channel
        """
    def cookies_all(self) -> typing.Awaitable[list[ChromiumCookie]]:
        r"""
        Return all cookies
        """
    def cookies_by_host(self, host:builtins.str) -> typing.Awaitable[list[ChromiumCookie]]:
        r"""
        Filter by host
        """
    def logins_all(self) -> typing.Awaitable[list[LoginData]]:
        r"""
        Return all login data
        """
    def logins_by_host(self, host:builtins.str) -> typing.Awaitable[list[LoginData]]:
        r"""
        Filter by host
        """

class VivaldiCookieGetter:
    def __new__(cls, base:typing.Optional[builtins.str | os.PathLike | pathlib.Path]=None) -> typing.Awaitable[VivaldiCookieGetter]:
        r"""
        base: When browser start with `--user-data-dir=DIR` or special other channel
        """
    def cookies_all(self) -> typing.Awaitable[list[ChromiumCookie]]:
        r"""
        Return all cookies
        """
    def cookies_by_host(self, host:builtins.str) -> typing.Awaitable[list[ChromiumCookie]]:
        r"""
        Filter by host
        """

class VivaldiGetter:
    def __new__(cls, base:typing.Optional[builtins.str | os.PathLike | pathlib.Path]=None) -> typing.Awaitable[VivaldiGetter]:
        r"""
        base: When browser start with `--user-data-dir=DIR` or special other channel
        """
    def cookies_all(self) -> typing.Awaitable[list[ChromiumCookie]]:
        r"""
        Return all cookies
        """
    def cookies_by_host(self, host:builtins.str) -> typing.Awaitable[list[ChromiumCookie]]:
        r"""
        Filter by host
        """
    def logins_all(self) -> typing.Awaitable[list[LoginData]]:
        r"""
        Return all login data
        """
    def logins_by_host(self, host:builtins.str) -> typing.Awaitable[list[LoginData]]:
        r"""
        Filter by host
        """

class YandexCookieGetter:
    def __new__(cls, base:typing.Optional[builtins.str | os.PathLike | pathlib.Path]=None) -> typing.Awaitable[YandexCookieGetter]:
        r"""
        base: When browser start with `--user-data-dir=DIR` or special other channel
        """
    def cookies_all(self) -> typing.Awaitable[list[ChromiumCookie]]:
        r"""
        Return all cookies
        """
    def cookies_by_host(self, host:builtins.str) -> typing.Awaitable[list[ChromiumCookie]]:
        r"""
        Filter by host
        """

class YandexGetter:
    def __new__(cls, base:typing.Optional[builtins.str | os.PathLike | pathlib.Path]=None) -> typing.Awaitable[YandexGetter]:
        r"""
        base: When browser start with `--user-data-dir=DIR` or special other channel
        """
    def cookies_all(self) -> typing.Awaitable[list[ChromiumCookie]]:
        r"""
        Return all cookies
        """
    def cookies_by_host(self, host:builtins.str) -> typing.Awaitable[list[ChromiumCookie]]:
        r"""
        Filter by host
        """
    def logins_all(self) -> typing.Awaitable[list[LoginData]]:
        r"""
        Return all login data
        """
    def logins_by_host(self, host:builtins.str) -> typing.Awaitable[list[LoginData]]:
        r"""
        Filter by host
        """

class ZenCookieGetter:
    def __new__(cls, base:typing.Optional[builtins.str | os.PathLike | pathlib.Path]=None, profile:typing.Optional[builtins.str]=None, profile_path:typing.Optional[builtins.str | os.PathLike | pathlib.Path]=None) -> typing.Awaitable[ZenCookieGetter]:
        r"""
        `base`: When Firefox data path changed
        `profile`: When started with `-P <profile>`
        `profile_path`: when browser started with `-profile <profile_path>`
        
        When set `profile_path` ignore other parameters like `base`, `profile`.
        """
    def cookies_all(self) -> typing.Awaitable[list[MozCookie]]:
        r"""
        Return all cookies
        """
    def cookies_by_host(self, host:builtins.str) -> typing.Awaitable[list[MozCookie]]:
        r"""
        Filter by host
        """

class ZenGetter:
    def __new__(cls, base:typing.Optional[builtins.str | os.PathLike | pathlib.Path]=None, profile:typing.Optional[builtins.str]=None, profile_path:typing.Optional[builtins.str | os.PathLike | pathlib.Path]=None) -> typing.Awaitable[ZenGetter]:
        r"""
        `base`: When Firefox data path changed
        `profile`: When started with `-P <profile>`
        `profile_path`: when browser started with `-profile <profile_path>`
        
        When set `profile_path` ignore other parameters like `base`, `profile`.
        """
    def cookies_all(self) -> typing.Awaitable[list[MozCookie]]:
        r"""
        Return all cookies
        """
    def cookies_by_host(self, host:builtins.str) -> typing.Awaitable[list[MozCookie]]:
        r"""
        Filter by host
        """

class SameSite(Enum):
    Non = ...
    Lax = ...
    Strict = ...

